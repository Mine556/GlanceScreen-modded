name: Manual build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
   inputs:
    tag:
     description: 'version (must start with v)'
     required: true
    description:
     description: 'description'
     required: true
    releasename:
     description: 'releasename'
     required: true

jobs:
  release:
    runs-on: windows-latest

    env:
      SigningCertificate: GlanceScreen_StoreCert.pfx
      Solution_Path: GlanceScreen.sln
      UWP_Project_Path: GlanceScreen.csproj
      UWP_Project_Directory: .\

    steps:
    
    - name: Declare variables
      id: vars
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Configure Pagefile
      uses: al-cheb/configure-pagefile-action@v1.2
      with:
        minimum-size: 32GB
        maximum-size: 32GB
        disk-root: "C:"
        
    - name: Create a Tag
      uses: simpleactions/create-tag@v1.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        sha: ${{ steps.vars.outputs.sha_short }}
        tag: ${{ github.event.inputs.tag }}
        message: ${{ github.event.inputs.description }}

    - name: Extract version from tag
      uses: Amadevus/pwsh-script@v1
      id: getVersion
      with:
        script: '("${{ github.event.inputs.tag }}").Split("v")[1]'

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0

    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ".\$env:UWP_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{steps.getVersion.outputs.result}}"
        $manifest.save(".\$env:UWP_Project_Directory\Package.appxmanifest")
        
    - name: Build the sideload solution
      run: msbuild $env:Solution_Path /p:Platform=ARM64 /p:AppxBundle=$env:AppxBundle /p:AppxBundlePlatforms="arm|arm64" /p:AppxPackageDir=C:\DeployOutput /restore
      env:
        AppxBundle: Always
        BuildMode: StoreUpload
        Configuration: Release

    - name: Create archive
      run: Compress-Archive -Path C:\DeployOutput\* -DestinationPath C:\DeployOutput\GlanceScreen_${{steps.getVersion.outputs.result}}.zip

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag }}
        release_name: ${{ github.event.inputs.releasename }} ${{steps.getVersion.outputs.result}}
        draft: false
        prerelease: true

    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: C:\DeployOutput\GlanceScreen_${{steps.getVersion.outputs.result}}.zip
        asset_name: GlanceScreen_${{steps.getVersion.outputs.result}}.zip
        asset_content_type: application/zip
